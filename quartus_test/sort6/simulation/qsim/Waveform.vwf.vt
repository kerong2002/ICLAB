// Copyright (C) 2024  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/24/2025 19:00:24"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          sort
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sort_vlg_vec_tst();
// constants                                           
// general purpose registers
reg mode;
reg [3:0] unsortID_0;
reg [3:0] unsortID_1;
reg [3:0] unsortID_2;
reg [3:0] unsortID_3;
reg [3:0] unsortID_4;
reg [3:0] unsortID_5;
reg [3:0] unsortgm_0;
reg [3:0] unsortgm_1;
reg [3:0] unsortgm_2;
reg [3:0] unsortgm_3;
reg [3:0] unsortgm_4;
reg [3:0] unsortgm_5;
// wires                                               
wire [3:0] sort_0;
wire [3:0] sort_1;
wire [3:0] sort_2;
wire [3:0] sort_3;
wire [3:0] sort_4;
wire [3:0] sort_5;

// assign statements (if any)                          
sort i1 (
// port map - connection between master ports and signals/registers   
	.mode(mode),
	.sort_0(sort_0),
	.sort_1(sort_1),
	.sort_2(sort_2),
	.sort_3(sort_3),
	.sort_4(sort_4),
	.sort_5(sort_5),
	.unsortID_0(unsortID_0),
	.unsortID_1(unsortID_1),
	.unsortID_2(unsortID_2),
	.unsortID_3(unsortID_3),
	.unsortID_4(unsortID_4),
	.unsortID_5(unsortID_5),
	.unsortgm_0(unsortgm_0),
	.unsortgm_1(unsortgm_1),
	.unsortgm_2(unsortgm_2),
	.unsortgm_3(unsortgm_3),
	.unsortgm_4(unsortgm_4),
	.unsortgm_5(unsortgm_5)
);
initial 
begin 
#1000000 $finish;
end 

// mode
initial
begin
	mode = 1'b1;
	mode = #400000 1'b0;
end 
// unsortID_0[ 3 ]
initial
begin
	unsortID_0[3] = 1'b0;
	unsortID_0[3] = #50000 1'b1;
	unsortID_0[3] = #100000 1'b0;
	unsortID_0[3] = #100000 1'b1;
	unsortID_0[3] = #100000 1'b0;
	unsortID_0[3] = #150000 1'b1;
	unsortID_0[3] = #100000 1'b0;
	unsortID_0[3] = #250000 1'b1;
end 
// unsortID_0[ 2 ]
initial
begin
	unsortID_0[2] = 1'b0;
	unsortID_0[2] = #50000 1'b1;
	unsortID_0[2] = #150000 1'b0;
	unsortID_0[2] = #50000 1'b1;
	unsortID_0[2] = #50000 1'b0;
	unsortID_0[2] = #50000 1'b1;
	unsortID_0[2] = #100000 1'b0;
	unsortID_0[2] = #250000 1'b1;
	unsortID_0[2] = #50000 1'b0;
	unsortID_0[2] = #150000 1'b1;
end 
// unsortID_0[ 1 ]
initial
begin
	unsortID_0[1] = 1'b0;
	unsortID_0[1] = #50000 1'b1;
	unsortID_0[1] = #50000 1'b0;
	unsortID_0[1] = #50000 1'b1;
	unsortID_0[1] = #50000 1'b0;
	unsortID_0[1] = #50000 1'b1;
	unsortID_0[1] = #100000 1'b0;
	unsortID_0[1] = #50000 1'b1;
	unsortID_0[1] = #50000 1'b0;
	unsortID_0[1] = #200000 1'b1;
	unsortID_0[1] = #50000 1'b0;
	unsortID_0[1] = #50000 1'b1;
	unsortID_0[1] = #200000 1'b0;
end 
// unsortID_0[ 0 ]
initial
begin
	unsortID_0[0] = 1'b0;
	unsortID_0[0] = #50000 1'b1;
	unsortID_0[0] = #100000 1'b0;
	unsortID_0[0] = #200000 1'b1;
	unsortID_0[0] = #50000 1'b0;
	unsortID_0[0] = #150000 1'b1;
	unsortID_0[0] = #50000 1'b0;
	unsortID_0[0] = #250000 1'b1;
end 
// unsortID_1[ 3 ]
initial
begin
	unsortID_1[3] = 1'b0;
	unsortID_1[3] = #50000 1'b1;
	unsortID_1[3] = #50000 1'b0;
	unsortID_1[3] = #50000 1'b1;
	unsortID_1[3] = #50000 1'b0;
	unsortID_1[3] = #50000 1'b1;
	unsortID_1[3] = #50000 1'b0;
	unsortID_1[3] = #50000 1'b1;
	unsortID_1[3] = #50000 1'b0;
	unsortID_1[3] = #100000 1'b1;
	unsortID_1[3] = #50000 1'b0;
	unsortID_1[3] = #50000 1'b1;
	unsortID_1[3] = #100000 1'b0;
	unsortID_1[3] = #100000 1'b1;
	unsortID_1[3] = #50000 1'b0;
	unsortID_1[3] = #100000 1'b1;
end 
// unsortID_1[ 2 ]
initial
begin
	unsortID_1[2] = 1'b1;
	unsortID_1[2] = #50000 1'b0;
	unsortID_1[2] = #100000 1'b1;
	unsortID_1[2] = #50000 1'b0;
	unsortID_1[2] = #100000 1'b1;
	unsortID_1[2] = #100000 1'b0;
	unsortID_1[2] = #50000 1'b1;
	unsortID_1[2] = #50000 1'b0;
	unsortID_1[2] = #50000 1'b1;
	unsortID_1[2] = #100000 1'b0;
	unsortID_1[2] = #250000 1'b1;
	unsortID_1[2] = #50000 1'b0;
end 
// unsortID_1[ 1 ]
initial
begin
	unsortID_1[1] = 1'b1;
	unsortID_1[1] = #300000 1'b0;
	unsortID_1[1] = #100000 1'b1;
	unsortID_1[1] = #100000 1'b0;
	unsortID_1[1] = #100000 1'b1;
	unsortID_1[1] = #50000 1'b0;
	unsortID_1[1] = #100000 1'b1;
	unsortID_1[1] = #50000 1'b0;
end 
// unsortID_1[ 0 ]
initial
begin
	unsortID_1[0] = 1'b0;
	unsortID_1[0] = #50000 1'b1;
	unsortID_1[0] = #100000 1'b0;
	unsortID_1[0] = #50000 1'b1;
	unsortID_1[0] = #50000 1'b0;
	unsortID_1[0] = #150000 1'b1;
	unsortID_1[0] = #50000 1'b0;
	unsortID_1[0] = #100000 1'b1;
	unsortID_1[0] = #200000 1'b0;
	unsortID_1[0] = #50000 1'b1;
	unsortID_1[0] = #150000 1'b0;
end 
// unsortID_2[ 3 ]
initial
begin
	unsortID_2[3] = 1'b1;
	unsortID_2[3] = #150000 1'b0;
	unsortID_2[3] = #100000 1'b1;
	unsortID_2[3] = #50000 1'b0;
	unsortID_2[3] = #50000 1'b1;
	unsortID_2[3] = #50000 1'b0;
	unsortID_2[3] = #150000 1'b1;
	unsortID_2[3] = #50000 1'b0;
	unsortID_2[3] = #150000 1'b1;
	unsortID_2[3] = #50000 1'b0;
	unsortID_2[3] = #50000 1'b1;
	unsortID_2[3] = #100000 1'b0;
end 
// unsortID_2[ 2 ]
initial
begin
	unsortID_2[2] = 1'b1;
	unsortID_2[2] = #200000 1'b0;
	unsortID_2[2] = #100000 1'b1;
	unsortID_2[2] = #100000 1'b0;
	unsortID_2[2] = #100000 1'b1;
	unsortID_2[2] = #100000 1'b0;
	unsortID_2[2] = #300000 1'b1;
end 
// unsortID_2[ 1 ]
initial
begin
	unsortID_2[1] = 1'b1;
	unsortID_2[1] = #50000 1'b0;
	unsortID_2[1] = #150000 1'b1;
	unsortID_2[1] = #150000 1'b0;
	unsortID_2[1] = #50000 1'b1;
	unsortID_2[1] = #50000 1'b0;
	unsortID_2[1] = #50000 1'b1;
	unsortID_2[1] = #100000 1'b0;
	unsortID_2[1] = #50000 1'b1;
	unsortID_2[1] = #50000 1'b0;
	unsortID_2[1] = #250000 1'b1;
end 
// unsortID_2[ 0 ]
initial
begin
	unsortID_2[0] = 1'b0;
	unsortID_2[0] = #50000 1'b1;
	unsortID_2[0] = #50000 1'b0;
	unsortID_2[0] = #100000 1'b1;
	unsortID_2[0] = #50000 1'b0;
	unsortID_2[0] = #50000 1'b1;
	unsortID_2[0] = #50000 1'b0;
	unsortID_2[0] = #100000 1'b1;
	unsortID_2[0] = #150000 1'b0;
	unsortID_2[0] = #50000 1'b1;
	unsortID_2[0] = #100000 1'b0;
	unsortID_2[0] = #200000 1'b1;
end 
// unsortID_3[ 3 ]
initial
begin
	unsortID_3[3] = 1'b1;
	unsortID_3[3] = #50000 1'b0;
	unsortID_3[3] = #50000 1'b1;
	unsortID_3[3] = #50000 1'b0;
	unsortID_3[3] = #50000 1'b1;
	unsortID_3[3] = #50000 1'b0;
	unsortID_3[3] = #50000 1'b1;
	unsortID_3[3] = #100000 1'b0;
	unsortID_3[3] = #100000 1'b1;
	unsortID_3[3] = #200000 1'b0;
	unsortID_3[3] = #150000 1'b1;
	unsortID_3[3] = #100000 1'b0;
end 
// unsortID_3[ 2 ]
initial
begin
	unsortID_3[2] = 1'b1;
	unsortID_3[2] = #100000 1'b0;
	unsortID_3[2] = #50000 1'b1;
	unsortID_3[2] = #50000 1'b0;
	unsortID_3[2] = #200000 1'b1;
	unsortID_3[2] = #50000 1'b0;
	unsortID_3[2] = #50000 1'b1;
	unsortID_3[2] = #50000 1'b0;
	unsortID_3[2] = #50000 1'b1;
	unsortID_3[2] = #50000 1'b0;
	unsortID_3[2] = #200000 1'b1;
	unsortID_3[2] = #100000 1'b0;
end 
// unsortID_3[ 1 ]
initial
begin
	unsortID_3[1] = 1'b0;
	unsortID_3[1] = #100000 1'b1;
	unsortID_3[1] = #50000 1'b0;
	unsortID_3[1] = #250000 1'b1;
	unsortID_3[1] = #50000 1'b0;
	unsortID_3[1] = #50000 1'b1;
	unsortID_3[1] = #150000 1'b0;
	unsortID_3[1] = #200000 1'b1;
	unsortID_3[1] = #100000 1'b0;
end 
// unsortID_3[ 0 ]
initial
begin
	unsortID_3[0] = 1'b0;
	unsortID_3[0] = #50000 1'b1;
	unsortID_3[0] = #100000 1'b0;
	unsortID_3[0] = #50000 1'b1;
	unsortID_3[0] = #200000 1'b0;
	unsortID_3[0] = #200000 1'b1;
	unsortID_3[0] = #100000 1'b0;
	unsortID_3[0] = #50000 1'b1;
	unsortID_3[0] = #50000 1'b0;
	unsortID_3[0] = #150000 1'b1;
end 
// unsortID_4[ 3 ]
initial
begin
	unsortID_4[3] = 1'b1;
	unsortID_4[3] = #200000 1'b0;
	unsortID_4[3] = #200000 1'b1;
	unsortID_4[3] = #50000 1'b0;
	unsortID_4[3] = #200000 1'b1;
	unsortID_4[3] = #50000 1'b0;
	unsortID_4[3] = #100000 1'b1;
	unsortID_4[3] = #50000 1'b0;
end 
// unsortID_4[ 2 ]
initial
begin
	unsortID_4[2] = 1'b0;
	unsortID_4[2] = #50000 1'b1;
	unsortID_4[2] = #150000 1'b0;
	unsortID_4[2] = #150000 1'b1;
	unsortID_4[2] = #50000 1'b0;
	unsortID_4[2] = #100000 1'b1;
	unsortID_4[2] = #50000 1'b0;
	unsortID_4[2] = #50000 1'b1;
	unsortID_4[2] = #50000 1'b0;
	unsortID_4[2] = #100000 1'b1;
	unsortID_4[2] = #50000 1'b0;
	unsortID_4[2] = #100000 1'b1;
	unsortID_4[2] = #50000 1'b0;
end 
// unsortID_4[ 1 ]
initial
begin
	unsortID_4[1] = 1'b1;
	unsortID_4[1] = #50000 1'b0;
	unsortID_4[1] = #50000 1'b1;
	unsortID_4[1] = #100000 1'b0;
	unsortID_4[1] = #50000 1'b1;
	unsortID_4[1] = #50000 1'b0;
	unsortID_4[1] = #100000 1'b1;
	unsortID_4[1] = #100000 1'b0;
	unsortID_4[1] = #50000 1'b1;
	unsortID_4[1] = #100000 1'b0;
	unsortID_4[1] = #50000 1'b1;
	unsortID_4[1] = #50000 1'b0;
	unsortID_4[1] = #50000 1'b1;
	unsortID_4[1] = #50000 1'b0;
	unsortID_4[1] = #50000 1'b1;
end 
// unsortID_4[ 0 ]
initial
begin
	unsortID_4[0] = 1'b1;
	unsortID_4[0] = #50000 1'b0;
	unsortID_4[0] = #200000 1'b1;
	unsortID_4[0] = #100000 1'b0;
	unsortID_4[0] = #200000 1'b1;
	unsortID_4[0] = #50000 1'b0;
	unsortID_4[0] = #150000 1'b1;
	unsortID_4[0] = #150000 1'b0;
	unsortID_4[0] = #50000 1'b1;
end 
// unsortID_5[ 3 ]
initial
begin
	unsortID_5[3] = 1'b1;
	unsortID_5[3] = #50000 1'b0;
	unsortID_5[3] = #50000 1'b1;
	unsortID_5[3] = #50000 1'b0;
	unsortID_5[3] = #50000 1'b1;
	unsortID_5[3] = #100000 1'b0;
	unsortID_5[3] = #100000 1'b1;
	unsortID_5[3] = #50000 1'b0;
	unsortID_5[3] = #50000 1'b1;
	unsortID_5[3] = #350000 1'b0;
	unsortID_5[3] = #50000 1'b1;
	unsortID_5[3] = #50000 1'b0;
end 
// unsortID_5[ 2 ]
initial
begin
	unsortID_5[2] = 1'b0;
	unsortID_5[2] = #100000 1'b1;
	unsortID_5[2] = #50000 1'b0;
	unsortID_5[2] = #150000 1'b1;
	unsortID_5[2] = #100000 1'b0;
	unsortID_5[2] = #50000 1'b1;
	unsortID_5[2] = #200000 1'b0;
	unsortID_5[2] = #50000 1'b1;
	unsortID_5[2] = #50000 1'b0;
	unsortID_5[2] = #100000 1'b1;
	unsortID_5[2] = #50000 1'b0;
end 
// unsortID_5[ 1 ]
initial
begin
	unsortID_5[1] = 1'b0;
	unsortID_5[1] = #100000 1'b1;
	unsortID_5[1] = #50000 1'b0;
	unsortID_5[1] = #50000 1'b1;
	unsortID_5[1] = #250000 1'b0;
	unsortID_5[1] = #100000 1'b1;
	unsortID_5[1] = #100000 1'b0;
	unsortID_5[1] = #50000 1'b1;
	unsortID_5[1] = #50000 1'b0;
	unsortID_5[1] = #150000 1'b1;
	unsortID_5[1] = #50000 1'b0;
end 
// unsortID_5[ 0 ]
initial
begin
	unsortID_5[0] = 1'b1;
	unsortID_5[0] = #50000 1'b0;
	unsortID_5[0] = #100000 1'b1;
	unsortID_5[0] = #50000 1'b0;
	unsortID_5[0] = #50000 1'b1;
	unsortID_5[0] = #200000 1'b0;
	unsortID_5[0] = #150000 1'b1;
	unsortID_5[0] = #50000 1'b0;
	unsortID_5[0] = #150000 1'b1;
	unsortID_5[0] = #50000 1'b0;
	unsortID_5[0] = #100000 1'b1;
end 
// unsortgm_0[ 3 ]
initial
begin
	unsortgm_0[3] = 1'b1;
	unsortgm_0[3] = #50000 1'b0;
	unsortgm_0[3] = #50000 1'b1;
	unsortgm_0[3] = #150000 1'b0;
	unsortgm_0[3] = #50000 1'b1;
	unsortgm_0[3] = #50000 1'b0;
	unsortgm_0[3] = #100000 1'b1;
	unsortgm_0[3] = #50000 1'b0;
	unsortgm_0[3] = #100000 1'b1;
	unsortgm_0[3] = #50000 1'b0;
	unsortgm_0[3] = #50000 1'b1;
	unsortgm_0[3] = #200000 1'b0;
	unsortgm_0[3] = #50000 1'b1;
end 
// unsortgm_0[ 2 ]
initial
begin
	unsortgm_0[2] = 1'b1;
	unsortgm_0[2] = #100000 1'b0;
	unsortgm_0[2] = #50000 1'b1;
	unsortgm_0[2] = #200000 1'b0;
	unsortgm_0[2] = #50000 1'b1;
	unsortgm_0[2] = #50000 1'b0;
	unsortgm_0[2] = #100000 1'b1;
	unsortgm_0[2] = #50000 1'b0;
	unsortgm_0[2] = #250000 1'b1;
	unsortgm_0[2] = #50000 1'b0;
	unsortgm_0[2] = #50000 1'b1;
end 
// unsortgm_0[ 1 ]
initial
begin
	unsortgm_0[1] = 1'b1;
	unsortgm_0[1] = #100000 1'b0;
	unsortgm_0[1] = #100000 1'b1;
	unsortgm_0[1] = #100000 1'b0;
	unsortgm_0[1] = #50000 1'b1;
	unsortgm_0[1] = #50000 1'b0;
	unsortgm_0[1] = #50000 1'b1;
	unsortgm_0[1] = #50000 1'b0;
	unsortgm_0[1] = #200000 1'b1;
	unsortgm_0[1] = #150000 1'b0;
end 
// unsortgm_0[ 0 ]
initial
begin
	unsortgm_0[0] = 1'b0;
	unsortgm_0[0] = #100000 1'b1;
	unsortgm_0[0] = #150000 1'b0;
	unsortgm_0[0] = #50000 1'b1;
	unsortgm_0[0] = #100000 1'b0;
	unsortgm_0[0] = #50000 1'b1;
	unsortgm_0[0] = #200000 1'b0;
	unsortgm_0[0] = #150000 1'b1;
	unsortgm_0[0] = #100000 1'b0;
end 
// unsortgm_1[ 3 ]
initial
begin
	unsortgm_1[3] = 1'b1;
	unsortgm_1[3] = #100000 1'b0;
	unsortgm_1[3] = #450000 1'b1;
	unsortgm_1[3] = #150000 1'b0;
	unsortgm_1[3] = #150000 1'b1;
	unsortgm_1[3] = #50000 1'b0;
end 
// unsortgm_1[ 2 ]
initial
begin
	unsortgm_1[2] = 1'b1;
	unsortgm_1[2] = #50000 1'b0;
	unsortgm_1[2] = #50000 1'b1;
	unsortgm_1[2] = #200000 1'b0;
	unsortgm_1[2] = #50000 1'b1;
	unsortgm_1[2] = #50000 1'b0;
	unsortgm_1[2] = #50000 1'b1;
	unsortgm_1[2] = #150000 1'b0;
	unsortgm_1[2] = #50000 1'b1;
	unsortgm_1[2] = #150000 1'b0;
	unsortgm_1[2] = #100000 1'b1;
end 
// unsortgm_1[ 1 ]
initial
begin
	unsortgm_1[1] = 1'b0;
	unsortgm_1[1] = #100000 1'b1;
	unsortgm_1[1] = #50000 1'b0;
	unsortgm_1[1] = #50000 1'b1;
	unsortgm_1[1] = #150000 1'b0;
	unsortgm_1[1] = #200000 1'b1;
	unsortgm_1[1] = #250000 1'b0;
	unsortgm_1[1] = #50000 1'b1;
	unsortgm_1[1] = #50000 1'b0;
	unsortgm_1[1] = #50000 1'b1;
end 
// unsortgm_1[ 0 ]
initial
begin
	unsortgm_1[0] = 1'b1;
	unsortgm_1[0] = #50000 1'b0;
	unsortgm_1[0] = #100000 1'b1;
	unsortgm_1[0] = #50000 1'b0;
	unsortgm_1[0] = #100000 1'b1;
	unsortgm_1[0] = #150000 1'b0;
	unsortgm_1[0] = #100000 1'b1;
	unsortgm_1[0] = #250000 1'b0;
	unsortgm_1[0] = #50000 1'b1;
	unsortgm_1[0] = #100000 1'b0;
end 
// unsortgm_2[ 3 ]
initial
begin
	unsortgm_2[3] = 1'b1;
	unsortgm_2[3] = #150000 1'b0;
	unsortgm_2[3] = #100000 1'b1;
	unsortgm_2[3] = #50000 1'b0;
	unsortgm_2[3] = #50000 1'b1;
	unsortgm_2[3] = #50000 1'b0;
	unsortgm_2[3] = #150000 1'b1;
	unsortgm_2[3] = #50000 1'b0;
	unsortgm_2[3] = #150000 1'b1;
	unsortgm_2[3] = #50000 1'b0;
	unsortgm_2[3] = #50000 1'b1;
	unsortgm_2[3] = #100000 1'b0;
end 
// unsortgm_2[ 2 ]
initial
begin
	unsortgm_2[2] = 1'b1;
	unsortgm_2[2] = #200000 1'b0;
	unsortgm_2[2] = #100000 1'b1;
	unsortgm_2[2] = #100000 1'b0;
	unsortgm_2[2] = #100000 1'b1;
	unsortgm_2[2] = #100000 1'b0;
	unsortgm_2[2] = #300000 1'b1;
end 
// unsortgm_2[ 1 ]
initial
begin
	unsortgm_2[1] = 1'b1;
	unsortgm_2[1] = #50000 1'b0;
	unsortgm_2[1] = #150000 1'b1;
	unsortgm_2[1] = #150000 1'b0;
	unsortgm_2[1] = #50000 1'b1;
	unsortgm_2[1] = #50000 1'b0;
	unsortgm_2[1] = #50000 1'b1;
	unsortgm_2[1] = #100000 1'b0;
	unsortgm_2[1] = #50000 1'b1;
	unsortgm_2[1] = #50000 1'b0;
	unsortgm_2[1] = #250000 1'b1;
end 
// unsortgm_2[ 0 ]
initial
begin
	unsortgm_2[0] = 1'b0;
	unsortgm_2[0] = #50000 1'b1;
	unsortgm_2[0] = #50000 1'b0;
	unsortgm_2[0] = #100000 1'b1;
	unsortgm_2[0] = #50000 1'b0;
	unsortgm_2[0] = #50000 1'b1;
	unsortgm_2[0] = #50000 1'b0;
	unsortgm_2[0] = #100000 1'b1;
	unsortgm_2[0] = #150000 1'b0;
	unsortgm_2[0] = #50000 1'b1;
	unsortgm_2[0] = #100000 1'b0;
	unsortgm_2[0] = #200000 1'b1;
end 
// unsortgm_3[ 3 ]
initial
begin
	unsortgm_3[3] = 1'b1;
	unsortgm_3[3] = #50000 1'b0;
	unsortgm_3[3] = #100000 1'b1;
	unsortgm_3[3] = #50000 1'b0;
	unsortgm_3[3] = #100000 1'b1;
	unsortgm_3[3] = #200000 1'b0;
	unsortgm_3[3] = #50000 1'b1;
	unsortgm_3[3] = #50000 1'b0;
	unsortgm_3[3] = #100000 1'b1;
	unsortgm_3[3] = #50000 1'b0;
	unsortgm_3[3] = #100000 1'b1;
end 
// unsortgm_3[ 2 ]
initial
begin
	unsortgm_3[2] = 1'b0;
	unsortgm_3[2] = #50000 1'b1;
	unsortgm_3[2] = #100000 1'b0;
	unsortgm_3[2] = #100000 1'b1;
	unsortgm_3[2] = #200000 1'b0;
	unsortgm_3[2] = #250000 1'b1;
	unsortgm_3[2] = #50000 1'b0;
	unsortgm_3[2] = #150000 1'b1;
end 
// unsortgm_3[ 1 ]
initial
begin
	unsortgm_3[1] = 1'b0;
	unsortgm_3[1] = #100000 1'b1;
	unsortgm_3[1] = #150000 1'b0;
	unsortgm_3[1] = #50000 1'b1;
	unsortgm_3[1] = #50000 1'b0;
	unsortgm_3[1] = #50000 1'b1;
	unsortgm_3[1] = #50000 1'b0;
	unsortgm_3[1] = #150000 1'b1;
	unsortgm_3[1] = #50000 1'b0;
	unsortgm_3[1] = #100000 1'b1;
	unsortgm_3[1] = #200000 1'b0;
end 
// unsortgm_3[ 0 ]
initial
begin
	unsortgm_3[0] = 1'b0;
	unsortgm_3[0] = #50000 1'b1;
	unsortgm_3[0] = #50000 1'b0;
	unsortgm_3[0] = #50000 1'b1;
	unsortgm_3[0] = #50000 1'b0;
	unsortgm_3[0] = #50000 1'b1;
	unsortgm_3[0] = #50000 1'b0;
	unsortgm_3[0] = #100000 1'b1;
	unsortgm_3[0] = #100000 1'b0;
	unsortgm_3[0] = #100000 1'b1;
	unsortgm_3[0] = #150000 1'b0;
	unsortgm_3[0] = #50000 1'b1;
	unsortgm_3[0] = #50000 1'b0;
	unsortgm_3[0] = #50000 1'b1;
end 
// unsortgm_4[ 3 ]
initial
begin
	unsortgm_4[3] = 1'b1;
	unsortgm_4[3] = #50000 1'b0;
	unsortgm_4[3] = #50000 1'b1;
	unsortgm_4[3] = #50000 1'b0;
	unsortgm_4[3] = #150000 1'b1;
	unsortgm_4[3] = #50000 1'b0;
	unsortgm_4[3] = #100000 1'b1;
	unsortgm_4[3] = #50000 1'b0;
	unsortgm_4[3] = #50000 1'b1;
	unsortgm_4[3] = #150000 1'b0;
	unsortgm_4[3] = #50000 1'b1;
	unsortgm_4[3] = #150000 1'b0;
end 
// unsortgm_4[ 2 ]
initial
begin
	unsortgm_4[2] = 1'b1;
	unsortgm_4[2] = #50000 1'b0;
	unsortgm_4[2] = #50000 1'b1;
	unsortgm_4[2] = #50000 1'b0;
	unsortgm_4[2] = #50000 1'b1;
	unsortgm_4[2] = #50000 1'b0;
	unsortgm_4[2] = #50000 1'b1;
	unsortgm_4[2] = #50000 1'b0;
	unsortgm_4[2] = #50000 1'b1;
	unsortgm_4[2] = #300000 1'b0;
	unsortgm_4[2] = #50000 1'b1;
	unsortgm_4[2] = #100000 1'b0;
end 
// unsortgm_4[ 1 ]
initial
begin
	unsortgm_4[1] = 1'b0;
	unsortgm_4[1] = #200000 1'b1;
	unsortgm_4[1] = #150000 1'b0;
	unsortgm_4[1] = #150000 1'b1;
	unsortgm_4[1] = #50000 1'b0;
	unsortgm_4[1] = #200000 1'b1;
	unsortgm_4[1] = #100000 1'b0;
	unsortgm_4[1] = #50000 1'b1;
end 
// unsortgm_4[ 0 ]
initial
begin
	unsortgm_4[0] = 1'b0;
	unsortgm_4[0] = #50000 1'b1;
	unsortgm_4[0] = #50000 1'b0;
	unsortgm_4[0] = #100000 1'b1;
	unsortgm_4[0] = #50000 1'b0;
	unsortgm_4[0] = #100000 1'b1;
	unsortgm_4[0] = #50000 1'b0;
	unsortgm_4[0] = #250000 1'b1;
	unsortgm_4[0] = #100000 1'b0;
	unsortgm_4[0] = #100000 1'b1;
	unsortgm_4[0] = #50000 1'b0;
	unsortgm_4[0] = #50000 1'b1;
end 
// unsortgm_5[ 3 ]
initial
begin
	unsortgm_5[3] = 1'b0;
	unsortgm_5[3] = #300000 1'b1;
	unsortgm_5[3] = #100000 1'b0;
	unsortgm_5[3] = #100000 1'b1;
	unsortgm_5[3] = #100000 1'b0;
	unsortgm_5[3] = #50000 1'b1;
	unsortgm_5[3] = #50000 1'b0;
	unsortgm_5[3] = #50000 1'b1;
	unsortgm_5[3] = #50000 1'b0;
end 
// unsortgm_5[ 2 ]
initial
begin
	unsortgm_5[2] = 1'b1;
	unsortgm_5[2] = #150000 1'b0;
	unsortgm_5[2] = #50000 1'b1;
	unsortgm_5[2] = #250000 1'b0;
	unsortgm_5[2] = #50000 1'b1;
	unsortgm_5[2] = #150000 1'b0;
	unsortgm_5[2] = #100000 1'b1;
	unsortgm_5[2] = #200000 1'b0;
end 
// unsortgm_5[ 1 ]
initial
begin
	unsortgm_5[1] = 1'b1;
	unsortgm_5[1] = #150000 1'b0;
	unsortgm_5[1] = #50000 1'b1;
	unsortgm_5[1] = #50000 1'b0;
	unsortgm_5[1] = #250000 1'b1;
	unsortgm_5[1] = #100000 1'b0;
	unsortgm_5[1] = #50000 1'b1;
	unsortgm_5[1] = #50000 1'b0;
	unsortgm_5[1] = #50000 1'b1;
	unsortgm_5[1] = #100000 1'b0;
	unsortgm_5[1] = #50000 1'b1;
end 
// unsortgm_5[ 0 ]
initial
begin
	unsortgm_5[0] = 1'b1;
	unsortgm_5[0] = #50000 1'b0;
	unsortgm_5[0] = #50000 1'b1;
	unsortgm_5[0] = #50000 1'b0;
	unsortgm_5[0] = #50000 1'b1;
	unsortgm_5[0] = #50000 1'b0;
	unsortgm_5[0] = #100000 1'b1;
	unsortgm_5[0] = #150000 1'b0;
	unsortgm_5[0] = #50000 1'b1;
	unsortgm_5[0] = #50000 1'b0;
	unsortgm_5[0] = #50000 1'b1;
	unsortgm_5[0] = #150000 1'b0;
	unsortgm_5[0] = #50000 1'b1;
	unsortgm_5[0] = #50000 1'b0;
	unsortgm_5[0] = #50000 1'b1;
end 
endmodule

